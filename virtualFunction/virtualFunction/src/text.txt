所有的虚函数、类等对整个面向对象概念都非常重要

虚函数允许我们在子类中重写方法

举个例子  我们又两个类 A 和 B 类，其中 B 类是由 A 派生出来的

我们在A中创建一个方法  标记成 virtual 我们可以在B中重写这个方法 执行其他的操作

virtual function 不是没有额外开销的  这里有两种与虚函数相关的运行时的成本

首先我们需要额外的内存来存储V表，这样我们就可以分配到正确的函数
其中要有一个成员指针，指向v表
其次每次我们调用这个虚函数的时候，我们需要遍历这个表来找到我们需要映射的函数



=============================================
c++ 接口  纯虚函数 pure virtual function
纯虚函数允许我们再基类中定义一个没有实现的函数，然后强制子类去实现该函数

在C++中有一个非常常见的情况，就是创建一个基类，只由未实现的方法构成，然后强制子类去实际实现它们，这通常被称之为接口
因此类中的接口只包含为实现的方法，作为模板。由于这个接口实际上并不包含方法实现，我们实际上不可能实例化哪个类
我们来改写Entity中的GetName 搞成纯虚函数

// 纯虚函数经常会被应用在这些场景下
如果确保类都有一个特定的方法，那么可以将这个类（抽象基类）作为参数（类型）放到一个通用的函数中
（具体示例见main.learn.cpp）
然后就可以调用这个方法或者做其他的事情