#include <iostream>
#include "log.h"


#define LOG(x) std::cout << x << std::endl

int main() 
{
	// pointers  指针是c++中最重要的一环
	// 先学习原始指针，现在c++ 分为原始指针和智能指针
	// 我们写程序其实就是利用内存，对于计算机来说，内存就是它的一切
	// 因为我们所有的程序都是在内存里运行的
	// 所以 在我们以后学习编程或者说编程过程中  最重要的一件事情 就是内存
	// 当你编写一个程序并启动它时 程序的所有东西都会被加载进内存里 你要做的事情，你对计算机的指令其实都是在内存中的
	// cpu就是这样去访问我们给出的指令并做出相应的计算的
	// 
	// 最最最重要的概念  指针其实就是一种存储内存地址的数字！
	// 
	// 指针其实就是一种存储内存地址的数字！
	// 
	// 指针其实就是一种存储内存地址的数字！
	// 重要的事情说三遍
	//
	
	// 创建一个最纯粹的指针， 空指针 void 的意思就是没有类型  no type
	// 这个意思就是 我们不在乎这个指针指向的数据是什么类型，我们只需要要给存储内存地址的一串数字罢了
	 void* ptr1 = 0; // 我们给这个指针的内存地址是0 这是什么意思？ 0肯定不是一个有效的内存地址，因为内存地址不会一直到0
	// 这里给到的0指针的意思就是它是一个完全无效的指针，无效指针完全可以接受的状态
	// 我们不能直接在0指针这里进行读取和写入 这样做的话程序会崩溃  所以我们有一种更优雅的写法
	void* ptr2 = NULL; // 这实际上是一个#define  我们鼠标放上去看会看到  #define NULL 0 的字样
	// 亦或者说我们可以用 c++上的另一个关键字
	void* ptr3 = nullptr;
	// 这就是我们能够实现的最简单的指针

	int var = 8; // 我们创建的每个变量都有一个内存地址，因为我们需要要给地方来存储这个变量
	// 如果我们想知道这个变量的内存地址 在内存的哪个地方  我们可以用 &运算符 来做到
	void* ptr4 = &var; // 000000EBBE2FFC64 每次的结果不一样  这里只是一次展示 这里我们可以看到  这个结果实际上还是一个数字
	int* ptr5 = &var; // 这两个并没有任何区别  更换成任何类型的指针它都不会有任何区别
	//LOG(ptr4);

	std::cin.get();

}